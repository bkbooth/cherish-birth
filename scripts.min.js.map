{"version":3,"sources":["script.js"],"names":["onReady","handleActiveButtonClick","event","preventDefault","document","querySelector","classList","toggle","onSubmit","form","target","fields","validateInputs","isLteIe9","formData","reduce","data","field","value","fetch","action","method","body","JSON","stringify","headers","Headers","Accept","Content-Type","then","response","ok","Promise","resolve","reject","add","catch","removeAttribute","remove","setAttribute","valid","forEach","hasAttribute","parentNode","onInputChange","inputElement","parentElement","contains","emailElement","email","emailParent","name","activeButton","addEventListener","querySelectorAll","activeElement"],"mappings":"YAAA,SAASA,WAmBP,QAASC,GAAwBC,GAC/BA,EAAMC,iBAENC,SAASC,cAAc,aAAaC,UAAUC,OAAO,WAQvD,QAASC,GAASN,GAChB,GAAMO,GAAuCP,EAAMQ,OAC7CC,GAAU,OAAQ,QAAS,cAAe,UAAW,MAAO,WAAY,UAC9E,KAAKC,EAAeH,EAAME,GACxB,MAAOT,GAAMC,gBAIf,KAAIU,EAAJ,CAGEX,EAAMC,gBAGR,IAAMW,GAAWH,EAAOI,OAAO,SAACC,EAAMC,GAIpC,MAHIR,GAAKQ,KACPD,EAAKC,GAASR,EAAKQ,GAAOC,OAAS,QAE9BF,MAGTG,OAAMV,EAAKW,QACTC,OAAQZ,EAAKY,OACbC,KAAMC,KAAKC,UAAUV,GACrBW,QAAS,GAAIC,UACXC,OAAU,mBACVC,eAAgB,uBAGjBC,KAAK,SAACC,GAAD,MAAcA,GAASC,GAAKC,QAAQC,UAAYD,QAAQE,WAC7DL,KAAK,WAAA,MAAMpB,GAAKH,UAAU6B,IAAI,kBAC9BC,MAAM,WACL3B,EAAKH,UAAU6B,IAAI,qBACnB1B,EAAKJ,cAAc,uBAAuBgC,gBAAgB,cAE3DR,KAAK,WAAA,MAAMpB,GAAKH,UAAUgC,OAAO,gBAEpC7B,EAAKH,UAAU6B,IAAI,cACnB1B,EAAKH,UAAUgC,OAAO,eAAgB,qBACtC7B,EAAKJ,cAAc,uBAAuBkC,aAAa,WAAY,KAWrE,QAAS3B,GAAeH,EAAME,GAC5B,GAAI6B,IAAQ,CAUZ,OAPA7B,GAAO8B,QAAQ,SAACxB,GACVR,EAAKQ,IAAUR,EAAKQ,GAAOyB,aAAa,cAAgBjC,EAAKQ,GAAOC,QACtEsB,GAAQ,EACR/B,EAAKQ,GAAO0B,WAAWrC,UAAU6B,IAAI,iBAIlCK,EAkCT,QAASI,GAAc1C,GACrB,GAAM2C,GAAe3C,EAAMQ,OACrBoC,EAAgBD,EAAaF,WAG7BvB,EAASyB,EAAa3B,MAAQ,MAAQ,QAC5C4B,GAAcxC,UAAUc,GAAQ,YAG5ByB,EAAa3B,OAAS4B,EAAcxC,UAAUyC,SAAS,aACzDD,EAAcxC,UAAUgC,OAAO,aAIjC,IAAMU,GAAevC,EAAKwC,MACpBC,EAAcF,EAAaL,UACjC,IAA0B,gBAAtBE,EAAaM,KAAwB,CAEvCH,EADeH,EAAa3B,MAAQ,kBAAoB,gBACnC,WAAY,KAC5B8B,EAAaN,aAAa,aAAeQ,EAAY5C,UAAUyC,SAAS,eAC3EG,EAAY5C,UAAUgC,OAAO,eAhJnC,GAAMzB,GAAWT,SAASC,cAAc,QAAQC,UAAUyC,SAAS,WAE7DK,EAAehD,SAASC,cAAc,eACxC+C,IACFA,EAAaC,iBAAiB,QAASpD,EAGzC,IAAMQ,GAAuCL,SAASC,cAAc,eAChEI,KACFA,EAAK4C,iBAAiB,SAAU7C,GAyFlC,SAA6BC,GACLA,EAAK6C,iBAAiB,iDAC9Bb,QAAQ,SAACI,GACrB,GAAMC,GAAgBD,EAAaF,UAEnCE,GAAaQ,iBAAiB,QAAS,SAACnD,GAAD,MAAWA,GAAMQ,OAAOiC,WAAWrC,UAAU6B,IAAI,gBACxFU,EAAaQ,iBAAiB,OAAQ,SAACnD,GAAD,MAAWA,GAAMQ,OAAOiC,WAAWrC,UAAUgC,OAAO,gBAC1FO,EAAaQ,iBAAiB,QAAST,GAGnCC,IAAiBzC,SAASmD,eAC5BT,EAAcxC,UAAU6B,IAAI,cAI1BU,EAAa3B,OACf4B,EAAcxC,UAAU6B,IAAI,eAxGZ1B,IA4IxBL,SAASiD,iBAAiB,mBAAoBrD","file":"scripts.min.js","sourcesContent":["function onReady() {\n  const isLteIe9 = document.querySelector('html').classList.contains('lte-ie9');\n\n  const activeButton = document.querySelector('a.btn.active');\n  if (activeButton) {\n    activeButton.addEventListener('click', handleActiveButtonClick);\n  }\n\n  const form = /** @type {HTMLFormElement} **/ document.querySelector('form#contact');\n  if (form) {\n    form.addEventListener('submit', onSubmit);\n    setupInputListeners(form);\n  }\n\n  /**\n   * Prevent navigation and toggle menu 'is-open' class\n   *\n   * @param {MouseEvent} event\n   */\n  function handleActiveButtonClick(event) {\n    event.preventDefault();\n\n    document.querySelector('nav .menu').classList.toggle('is-open');\n  }\n\n  /**\n   * Handle contact form submissions\n   *\n   * @param {Event} event\n   */\n  function onSubmit(event) {\n    const form = /** @type {HTMLFormElement} **/ event.target;\n    const fields = ['name', 'email', 'phoneNumber', 'message', '_cc', '_subject', '_gotcha'];\n    if (!validateInputs(form, fields)) {\n      return event.preventDefault();\n    }\n\n    // Use normal HTTP form submission for <IE10\n    if (isLteIe9) {\n      return;\n    } else {\n      event.preventDefault();\n    }\n\n    const formData = fields.reduce((data, field) => {\n      if (form[field]) {\n        data[field] = form[field].value || void 0;\n      }\n      return data;\n    }, {});\n\n    fetch(form.action, {\n      method: form.method,\n      body: JSON.stringify(formData),\n      headers: new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }),\n    })\n      .then((response) => response.ok ? Promise.resolve() : Promise.reject())\n      .then(() => form.classList.add('is-submitted'))\n      .catch(() => {\n        form.classList.add('failed-submitting');\n        form.querySelector('button[type=submit]').removeAttribute('disabled');\n      })\n      .then(() => form.classList.remove('is-sending'));\n\n    form.classList.add('is-sending');\n    form.classList.remove('is-submitted', 'failed-submitting');\n    form.querySelector('button[type=submit]').setAttribute('disabled', '');\n  }\n\n  /**\n   * Validate form fields\n   *\n   * @param {HTMLFormElement} form\n   * @param {Array<string>}   fields\n   *\n   * @returns {boolean}\n   */\n  function validateInputs(form, fields) {\n    let valid = true;\n\n    // Validate 'required' fields\n    fields.forEach((field) => {\n      if (form[field] && form[field].hasAttribute('required') && !form[field].value) {\n        valid = false;\n        form[field].parentNode.classList.add('is-invalid');\n      }\n    });\n\n    return valid;\n  }\n\n  /**\n   * Setup focus/blur and input event listeners to form inputs\n   *\n   * @param {HTMLFormElement} form\n   */\n  function setupInputListeners(form) {\n    const inputElements = form.querySelectorAll('input[type=text], input[type=email], textarea');\n    inputElements.forEach((inputElement) => {\n      const parentElement = inputElement.parentNode;\n\n      inputElement.addEventListener('focus', (event) => event.target.parentNode.classList.add('is-focused'));\n      inputElement.addEventListener('blur', (event) => event.target.parentNode.classList.remove('is-focused'));\n      inputElement.addEventListener('input', onInputChange);\n\n      // Firefox doesn't fire initial 'focus' event\n      if (inputElement === document.activeElement) {\n        parentElement.classList.add('is-focused');\n      }\n\n      // When navigating back/forward, form inputs might already have a value\n      if (inputElement.value) {\n        parentElement.classList.add('is-dirty');\n      }\n    });\n  }\n\n  /**\n   * Add/remove classes when input changes\n   *\n   * @param {InputEvent} event\n   */\n  function onInputChange(event) {\n    const inputElement = event.target;\n    const parentElement = inputElement.parentNode;\n\n    // Add/remove the 'is-dirty' class\n    const action = inputElement.value ? 'add' : 'remove';\n    parentElement.classList[action]('is-dirty');\n\n    // Remove the 'is-invalid' class\n    if (inputElement.value && parentElement.classList.contains('is-dirty')) {\n      parentElement.classList.remove('is-invalid');\n    }\n\n    // If phone number entered, remove 'required' from email field\n    const emailElement = form.email;\n    const emailParent = emailElement.parentNode;\n    if (inputElement.name === 'phoneNumber') {\n      const action = inputElement.value ? 'removeAttribute' : 'setAttribute';\n      emailElement[action]('required', '');\n      if (!emailElement.hasAttribute('required') && emailParent.classList.contains('is-invalid')) {\n        emailParent.classList.remove('is-invalid');\n      }\n    }\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', onReady);\n"]}