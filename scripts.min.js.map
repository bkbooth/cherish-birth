{"version":3,"sources":["script.js"],"names":["onReady","isLteIe9","document","querySelector","classList","contains","activeButton","addEventListener","event","preventDefault","toggle","form","onInputChange","inputElement","target","parentElement","parentNode","action","value","remove","emailElement","email","emailParent","name","hasAttribute","fields","valid","forEach","field","add","validateInputs","formData","reduce","data","fetch","method","body","JSON","stringify","headers","Headers","Accept","Content-Type","then","response","ok","Promise","resolve","reject","removeAttribute","setAttribute","querySelectorAll","activeElement"],"mappings":"aAAA,SAASA,UACP,IAAMC,EAAWC,SAASC,cAAc,QAAQC,UAAUC,SAAS,WAE7DC,EAAeJ,SAASC,cAAc,gBACxCG,GACFA,EAAaC,iBAAiB,QAchC,SAAiCC,GAC/BA,EAAMC,iBAENP,SAASC,cAAc,aAAaC,UAAUM,OAAO,aAdvD,IAAMC,EAAuCT,SAASC,cAAc,gBAqHpE,SAASS,EAAcJ,GACrB,IAAMK,EAAeL,EAAMM,OACrBC,EAAgBF,EAAaG,WAG7BC,EAASJ,EAAaK,MAAQ,MAAQ,SAC5CH,EAAcX,UAAUa,GAAQ,YAG5BJ,EAAaK,OAASH,EAAcX,UAAUC,SAAS,aACzDU,EAAcX,UAAUe,OAAO,cAIjC,IAAMC,EAAeT,EAAKU,MACpBC,EAAcF,EAAaJ,WACP,gBAAtBH,EAAaU,OAEfH,EADeP,EAAaK,MAAQ,kBAAoB,gBACnC,WAAY,KAC5BE,EAAaI,aAAa,aAAeF,EAAYlB,UAAUC,SAAS,eAC3EiB,EAAYlB,UAAUe,OAAO,eAxI/BR,IACFA,EAAKJ,iBAAiB,SAoBxB,SAAkBC,GAChB,IAAMG,EAAuCH,EAAMM,OAC7CW,EAAS,CAAC,OAAQ,QAAS,cAAe,UAAW,MAAO,WAAY,WAC9E,IA+CF,SAAwBd,EAAMc,GAC5B,IAAIC,GAAQ,EAUZ,OAPAD,EAAOE,QAAQ,SAACC,GACVjB,EAAKiB,IAAUjB,EAAKiB,GAAOJ,aAAa,cAAgBb,EAAKiB,GAAOV,QACtEQ,GAAQ,EACRf,EAAKiB,GAAOZ,WAAWZ,UAAUyB,IAAI,iBAIlCH,EA1DFI,CAAenB,EAAMc,GACxB,OAAOjB,EAAMC,iBAIf,CAAA,GAAIR,EACF,OAEAO,EAAMC,iBAGR,IAAMsB,EAAWN,EAAOO,OAAO,SAACC,EAAML,GAIpC,OAHIjB,EAAKiB,KACPK,EAAKL,GAASjB,EAAKiB,GAAOV,YAAS,GAE9Be,GACN,IAEHC,MAAMvB,EAAKM,OAAQ,CACjBkB,OAAQxB,EAAKwB,OACbC,KAAMC,KAAKC,UAAUP,GACrBQ,QAAS,IAAIC,QAAQ,CACnBC,OAAU,mBACVC,eAAgB,uBAGjBC,KAAK,SAACC,GAAD,OAAcA,EAASC,GAAKC,QAAQC,UAAYD,QAAQE,WAC7DL,KAAK,WAAA,OAAMhC,EAAKP,UAAUyB,IAAI,kBATjC,MAUS,WACLlB,EAAKP,UAAUyB,IAAI,qBACnBlB,EAAKR,cAAc,uBAAuB8C,gBAAgB,cAE3DN,KAAK,WAAA,OAAMhC,EAAKP,UAAUe,OAAO,gBAEpCR,EAAKP,UAAUyB,IAAI,cACnBlB,EAAKP,UAAUe,OAAO,eAAgB,qBACtCR,EAAKR,cAAc,uBAAuB+C,aAAa,WAAY,MA1D/CvC,EAyFOwC,iBAAiB,iDAC9BxB,QAAQ,SAACd,GACrB,IAAME,EAAgBF,EAAaG,WAEnCH,EAAaN,iBAAiB,QAAS,SAACC,GAAD,OAAWA,EAAMM,OAAOE,WAAWZ,UAAUyB,IAAI,gBACxFhB,EAAaN,iBAAiB,OAAQ,SAACC,GAAD,OAAWA,EAAMM,OAAOE,WAAWZ,UAAUe,OAAO,gBAC1FN,EAAaN,iBAAiB,QAASK,GAGnCC,IAAiBX,SAASkD,eAC5BrC,EAAcX,UAAUyB,IAAI,cAI1BhB,EAAaK,OACfH,EAAcX,UAAUyB,IAAI,eAoCpC3B,SAASK,iBAAiB,mBAAoBP","file":"scripts.min.js","sourcesContent":["function onReady() {\n  const isLteIe9 = document.querySelector('html').classList.contains('lte-ie9');\n\n  const activeButton = document.querySelector('a.btn.active');\n  if (activeButton) {\n    activeButton.addEventListener('click', handleActiveButtonClick);\n  }\n\n  const form = /** @type {HTMLFormElement} **/ document.querySelector('form#contact');\n  if (form) {\n    form.addEventListener('submit', onSubmit);\n    setupInputListeners(form);\n  }\n\n  /**\n   * Prevent navigation and toggle menu 'is-open' class\n   *\n   * @param {MouseEvent} event\n   */\n  function handleActiveButtonClick(event) {\n    event.preventDefault();\n\n    document.querySelector('nav .menu').classList.toggle('is-open');\n  }\n\n  /**\n   * Handle contact form submissions\n   *\n   * @param {Event} event\n   */\n  function onSubmit(event) {\n    const form = /** @type {HTMLFormElement} **/ event.target;\n    const fields = ['name', 'email', 'phoneNumber', 'message', '_cc', '_subject', '_gotcha'];\n    if (!validateInputs(form, fields)) {\n      return event.preventDefault();\n    }\n\n    // Use normal HTTP form submission for <IE10\n    if (isLteIe9) {\n      return;\n    } else {\n      event.preventDefault();\n    }\n\n    const formData = fields.reduce((data, field) => {\n      if (form[field]) {\n        data[field] = form[field].value || void 0;\n      }\n      return data;\n    }, {});\n\n    fetch(form.action, {\n      method: form.method,\n      body: JSON.stringify(formData),\n      headers: new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }),\n    })\n      .then((response) => response.ok ? Promise.resolve() : Promise.reject())\n      .then(() => form.classList.add('is-submitted'))\n      .catch(() => {\n        form.classList.add('failed-submitting');\n        form.querySelector('button[type=submit]').removeAttribute('disabled');\n      })\n      .then(() => form.classList.remove('is-sending'));\n\n    form.classList.add('is-sending');\n    form.classList.remove('is-submitted', 'failed-submitting');\n    form.querySelector('button[type=submit]').setAttribute('disabled', '');\n  }\n\n  /**\n   * Validate form fields\n   *\n   * @param {HTMLFormElement} form\n   * @param {Array<string>}   fields\n   *\n   * @returns {boolean}\n   */\n  function validateInputs(form, fields) {\n    let valid = true;\n\n    // Validate 'required' fields\n    fields.forEach((field) => {\n      if (form[field] && form[field].hasAttribute('required') && !form[field].value) {\n        valid = false;\n        form[field].parentNode.classList.add('is-invalid');\n      }\n    });\n\n    return valid;\n  }\n\n  /**\n   * Setup focus/blur and input event listeners to form inputs\n   *\n   * @param {HTMLFormElement} form\n   */\n  function setupInputListeners(form) {\n    const inputElements = form.querySelectorAll('input[type=text], input[type=email], textarea');\n    inputElements.forEach((inputElement) => {\n      const parentElement = inputElement.parentNode;\n\n      inputElement.addEventListener('focus', (event) => event.target.parentNode.classList.add('is-focused'));\n      inputElement.addEventListener('blur', (event) => event.target.parentNode.classList.remove('is-focused'));\n      inputElement.addEventListener('input', onInputChange);\n\n      // Firefox doesn't fire initial 'focus' event\n      if (inputElement === document.activeElement) {\n        parentElement.classList.add('is-focused');\n      }\n\n      // When navigating back/forward, form inputs might already have a value\n      if (inputElement.value) {\n        parentElement.classList.add('is-dirty');\n      }\n    });\n  }\n\n  /**\n   * Add/remove classes when input changes\n   *\n   * @param {InputEvent} event\n   */\n  function onInputChange(event) {\n    const inputElement = event.target;\n    const parentElement = inputElement.parentNode;\n\n    // Add/remove the 'is-dirty' class\n    const action = inputElement.value ? 'add' : 'remove';\n    parentElement.classList[action]('is-dirty');\n\n    // Remove the 'is-invalid' class\n    if (inputElement.value && parentElement.classList.contains('is-dirty')) {\n      parentElement.classList.remove('is-invalid');\n    }\n\n    // If phone number entered, remove 'required' from email field\n    const emailElement = form.email;\n    const emailParent = emailElement.parentNode;\n    if (inputElement.name === 'phoneNumber') {\n      const action = inputElement.value ? 'removeAttribute' : 'setAttribute';\n      emailElement[action]('required', '');\n      if (!emailElement.hasAttribute('required') && emailParent.classList.contains('is-invalid')) {\n        emailParent.classList.remove('is-invalid');\n      }\n    }\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', onReady);\n"]}